package com.valhalla.appmodules

import android.app.Application
import android.content.Context
import android.content.SharedPreferences
import android.os.Debug
import androidx.room.Room
import androidx.security.crypto.EncryptedSharedPreferences
import androidx.security.crypto.MasterKeys
import com.valhalla.BuildConfig
import com.valhalla.data.DB_NAME
import com.valhalla.data.ValhallaRoomDatabase
import com.valhalla.data.ValhallaRoomDatabase_Migrations
import com.valhalla.data.daos.CommentDao
import com.valhalla.data.daos.PostDao
import com.valhalla.data.util.PREF_MAIN
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.qualifiers.ApplicationContext
import dagger.hilt.components.SingletonComponent
import net.sqlcipher.database.SQLiteDatabase
import net.sqlcipher.database.SupportFactory
import javax.inject.Singleton

@InstallIn(SingletonComponent::class)
@Module
object DbModules {

    @Provides
    @Singleton
    fun providesSharedPreferences(application: Application): SharedPreferences {
        return if (BuildConfig.DEBUG) {
            application.getSharedPreferences(
                PREF_MAIN,
                Context.MODE_PRIVATE
            )
        } else {
            val masterKeyAlias = MasterKeys.getOrCreate(MasterKeys.AES256_GCM_SPEC)
            EncryptedSharedPreferences
                .create(
                    PREF_MAIN,
                    masterKeyAlias,
                    application,
                    EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,
                    EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM
                )
        }
    }

    @Suppress("SpreadOperator")
    @Provides
    @Singleton
    fun provideDatabase(
        @ApplicationContext context: Context
    ): ValhallaRoomDatabase {
        val builder = Room.databaseBuilder(
            context, ValhallaRoomDatabase::class.java,
            DB_NAME
        ).addMigrations(*ValhallaRoomDatabase_Migrations.build()) // autogenerated code by Roomigrant
            .fallbackToDestructiveMigration()
        if (Debug.isDebuggerConnected()) {
            builder.allowMainThreadQueries()
        }

        if (!BuildConfig.DEBUG) {
            val passphrase = SQLiteDatabase.getBytes(BuildConfig.DB_PASSPHRASE.toCharArray())
            val factory = SupportFactory(passphrase)
            builder.openHelperFactory(factory)
        }
        return builder.build()
    }

    @Provides
    fun providePostDao(db: ValhallaRoomDatabase): PostDao = db.postDao()

    @Provides
    fun provideCommentDao(db: ValhallaRoomDatabase): CommentDao = db.commentDao()
}
